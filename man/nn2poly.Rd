% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nn2poly.R
\name{nn2poly}
\alias{nn2poly}
\title{Obtain a polynomial representation from a trained neural network}
\usage{
nn2poly(
  object,
  max_order = 2,
  keep_layers = FALSE,
  taylor_orders = 8,
  ...,
  all_partitions = NULL
)
}
\arguments{
\item{object}{An object for which the computation of the nn2poly algorithm is desired.
For the default case, it should be a \code{list} of length L ( number of hidden layers + 1)
containing the weights matrix for each layer. The name of every element in the list
should be the name of the activation function to be used at each layer.

The expected shape of such matrices at any layer L is of the form
\eqn{(h_{(l-1)} + 1)*(h_l)}, that is, the number of rows is the number of neurons
in the previous layer plus the bias vector, and the number of columns is the
number of neurons in the current layer L. Therefore, each column
corresponds to the weight vector affecting each neuron in that layer.
The bias vector should be in the first row.
It could also be a \code{keras.engine.training.Model} model.}

\item{max_order}{Integer that determines the maximum order
that will be forced in the final polynomial, discarding terms of higher order
that would naturally arise using all the orders in \code{taylor_orders}.}

\item{keep_layers}{Boolean that determines if all polynomials computed in
the internal layers have to be stored and given in the output (\code{TRUE}),
or if only the last layer is needed (\code{FALSE}).}

\item{taylor_orders}{\code{integer} or \code{vector} of length L that sets the
degree at which Taylor expansion is truncated at each layer. If a single
value is used, that value is set for each non linear layer and 1 for linear
at each layer activation function. Default is set to 8.}

\item{...}{Ignored.}

\item{all_partitions}{Optional argument containing the needed multipartitions
as list of lists of lists. If \code{NULL}, the function computes it first. This
step can be computationally expensive and it is encouraged that the
multipartitions are stored and reused when possible.}
}
\value{
An object of class \code{nn2poly}.
If \code{keep_layers = FALSE} (default case), it returns a list
with an item named \code{labels} that is a list of integer vectors with each the
variables index associated to each polynomial term, and a item named \code{values}
which contains a matrix where each row are the coefficients of the polynomial
associated with an output neuron.

If \code{keep_layers = TRUE}, it returns a list of length L that for each
layer contains an item as explained before. The polynomials obtained at the
hidden layers are not needed to represent the NN but can be used to explore
how the method works.
}
\description{
Implements the main nn2poly algorithm to obtain a polynomial representation
of a trained neural network from its weights and Taylor expansion of its
activation functions.
}
